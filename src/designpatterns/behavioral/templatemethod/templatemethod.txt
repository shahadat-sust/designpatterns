# In Template pattern, an abstract class defines step(s)/way(s)/template(s) to execute its methods. 
# Its subclasses can override the method implementation as per need but the invocation is to be in 
  the same way as defined by an abstract class.
# It can provide default implementation that might be common for all or some of the subclasses.

Example: Suppose we want to provide an algorithm to build a house. The steps need to be performed to build 
         a house are – building foundation, building pillars, building walls and windows. The important point 
         is that the we can’t change the order of execution because we can’t build windows before building 
         the foundation. So in this case we can create a template method that will use different methods to 
         build the house

         Now building the foundation for a house is same for all type of houses, whether its a wooden house 
         or a glass house. So we can provide base implementation for this, if subclasses want to override this 
         method, they can but mostly it’s common for all the types of houses.

         To make sure that subclasses don’t override the template method, we should make it final.